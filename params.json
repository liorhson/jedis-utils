{"name":"jedis-utils","tagline":"Jedis utilities","body":"# jedis-utils\r\nUtilities for common tasks using [Jedis](https://github.com/xetorthio/jedis) (the java redis client).\r\n\r\n## Downloads [ ![Download](https://api.bintray.com/packages/yatech/maven/jedis-utils/images/download.svg) ](https://bintray.com/yatech/maven/jedis-utils/_latestVersion)\r\n*jedis-utils* is distributed using Bintray. Go to [jedis-utils](https://bintray.com/yatech/maven/jedis-utils) page in Bintray to get full download access to the released versions, as well as to get instructions for how to add it to your project dependencies.  \r\nSnapshot version can be obtained from oss.jfrog.org. Browse and see instructions [here](https://oss.jfrog.org/webapp/#/artifacts/browse/tree/General/oss-snapshot-local/org/yatech/jedis/jedis-utils).  \r\n\r\n## Lua Script Builder\r\nA builder facility for building lua scripts to be executed in Redis using Jedis. \r\nThe builder uses an API similar to the API provided by Jedis. \r\n\r\nFor example:\r\n```java\r\nimport static org.yatech.jedis.utils.lua.LuaScriptBuilder.*;\r\nimport org.yatech.jedis.utils.lua.LuaScriptBuilder;\r\nimport org.yatech.jedis.utils.lua.LuaScript;\r\nimport org.yatech.jedis.utils.lua.LuaLocalArray;\r\n\r\n...\r\n\r\nLuaScriptBuilder builder = startScript();\r\nbuilder.select(0);\r\nLuaLocalArray data = builder.hgetAll(\"key1\");\r\nbuilder.select(1);\r\n       .hmset(\"key1\", data)\r\n       .select(0)\r\n       .del(\"key1\");\r\nLuaScript script = builder.endScript();\r\n\r\nJedis jedis = ...\r\nscript.exec(jedis);\r\n```\r\n\r\nIt is also possible to create prepared scripts with arguments and with some control statements.\r\nFor example (this time in Groovy):\r\n```groovy\r\nimport static org.yatech.jedis.utils.lua.LuaScriptBuilder.*\r\nimport static org.yatech.jedis.utils.lua.LuaConditoins.*\r\n\r\n...\r\n\r\ndef key1 = newKeyArgument('key1')\r\ndef key2 = newKeyArgument('key2')\r\ndef member = newStringValueArgument('member')\r\ndef score = newDoubleValueArgument('score')\r\ndef db0 = newIntValueArgument('db0')\r\ndef db1 = newIntValueArgument('db1')\r\n\r\ndef script = startScript().with {\r\n    select(db0)\r\n    def payload = hgetAll(key1)\r\n    select(db1)\r\n    def existingScore = zscore(key2, member)\r\n    ifCondition(isNull(existingScore)).then(startBlock(it).with {\r\n        zadd(key2, score, member)\r\n        endBlock()\r\n    }).endIf()\r\n    hmset(key1, payload)\r\n    select(db0)\r\n    del(key1)\r\n    endPreparedScript()\r\n}\r\n\r\nscript.setKeyArgument('key1','myhash1')\r\nscript.setKeyArgument('key2','myzset1')\r\nscript.setValueArgument('db0',7)\r\nscript.setValueArgument('db1',8)\r\nscript.setValueArgument('member','thefirstmember')\r\nscript.setValueArgument('score',1.234)\r\nJedis jedis = ...\r\nscript.exec(jedis)\r\n```\r\n\r\n## Javadoc\r\n* [Latest snapshot](javadoc/snapshot)\r\n* [0.2.0](javadoc/0.2.0)\r\n* [0.1.0](javadoc/0.1.0)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}